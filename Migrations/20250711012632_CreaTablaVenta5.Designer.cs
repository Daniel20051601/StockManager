// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StockManager.Dal;

#nullable disable

namespace StockManager.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20250711012632_CreaTablaVenta5")]
    partial class CreaTablaVenta5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DetalleVenta", b =>
                {
                    b.Property<int>("DetalleVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DetalleVentaId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int>("VentaId")
                        .HasColumnType("integer");

                    b.HasKey("DetalleVentaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetallesVenta");
                });

            modelBuilder.Entity("StockManager.Models.Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoriaId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("StockManager.Models.Clientes", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClienteId"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstadoClienteId")
                        .HasColumnType("integer");

                    b.Property<decimal>("LimiteCredito")
                        .HasColumnType("numeric");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("RNCCedula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClienteId");

                    b.HasIndex("EstadoClienteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("StockManager.Models.CuentaPorCobrar", b =>
                {
                    b.Property<int>("CuentaPorCobrarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CuentaPorCobrarId"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<int>("EstadoCuentaId")
                        .HasColumnType("integer");

                    b.Property<int>("FacturaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaLimitePago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Mora")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SaldoPendiente")
                        .HasColumnType("numeric");

                    b.HasKey("CuentaPorCobrarId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoCuentaId");

                    b.HasIndex("FacturaId");

                    b.ToTable("CuentasPorCobrar");
                });

            modelBuilder.Entity("StockManager.Models.CuentaPorPagar", b =>
                {
                    b.Property<int>("CuentaPorPagarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CuentaPorPagarId"));

                    b.Property<int>("EstadoCuentaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaLimitePago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("OrdenCompraId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SaldoPendiente")
                        .HasColumnType("numeric");

                    b.HasKey("CuentaPorPagarId");

                    b.HasIndex("EstadoCuentaId");

                    b.HasIndex("OrdenCompraId");

                    b.ToTable("CuentasPorPagar");
                });

            modelBuilder.Entity("StockManager.Models.EstadoCliente", b =>
                {
                    b.Property<int>("EstadoClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoClienteId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoClienteId");

                    b.ToTable("EstadosClientes");
                });

            modelBuilder.Entity("StockManager.Models.EstadoCuenta", b =>
                {
                    b.Property<int>("EstadoCuentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoCuentaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoCuentaId");

                    b.ToTable("EstadosCuentas");
                });

            modelBuilder.Entity("StockManager.Models.EstadoFactura", b =>
                {
                    b.Property<int>("EstadoFacturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoFacturaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoFacturaId");

                    b.ToTable("EstadosFacturas");
                });

            modelBuilder.Entity("StockManager.Models.EstadoOrdenCompra", b =>
                {
                    b.Property<int>("EstadoOrdenCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoOrdenCompraId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoOrdenCompraId");

                    b.ToTable("EstadosOrdenCompra");
                });

            modelBuilder.Entity("StockManager.Models.EstadoProducto", b =>
                {
                    b.Property<int>("EstadoProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoProductoId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoProductoId");

                    b.ToTable("EstadosProductos");
                });

            modelBuilder.Entity("StockManager.Models.EstadoProveedor", b =>
                {
                    b.Property<int>("EstadoProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoProveedorId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoProveedorId");

                    b.ToTable("EstadosProveedores");
                });

            modelBuilder.Entity("StockManager.Models.Factura", b =>
                {
                    b.Property<int>("FacturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacturaId"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric");

                    b.Property<int>("EstadoFacturaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Impuestos")
                        .HasColumnType("numeric");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<string>("TipoPago")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("FacturaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoFacturaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("StockManager.Models.FacturaDetalle", b =>
                {
                    b.Property<int>("FacturaDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacturaDetalleId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric");

                    b.Property<int>("FacturaId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecioVentaUnitario")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric");

                    b.HasKey("FacturaDetalleId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("FacturasDetalles");
                });

            modelBuilder.Entity("StockManager.Models.Marca", b =>
                {
                    b.Property<int>("MarcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarcaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("MarcaId");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("StockManager.Models.Notificacion", b =>
                {
                    b.Property<int>("NotificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificacionId"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Leida")
                        .HasColumnType("boolean");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("NotificacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("StockManager.Models.OrdenCompra", b =>
                {
                    b.Property<int>("OrdenCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrdenCompraId"));

                    b.Property<int>("EstadoOrdenCompraId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaEntregaEstimada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Impuestos")
                        .HasColumnType("numeric");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroOrden")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("OrdenCompraId");

                    b.HasIndex("EstadoOrdenCompraId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("OrdenesCompras");
                });

            modelBuilder.Entity("StockManager.Models.OrdenCompraDetalle", b =>
                {
                    b.Property<int>("OrdenCompraDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrdenCompraDetalleId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("OrdenCompraId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecioCompraUnitario")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.HasKey("OrdenCompraDetalleId");

                    b.HasIndex("OrdenCompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("OrdenesComprasDetalles");
                });

            modelBuilder.Entity("StockManager.Models.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductoId"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstadoProductoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenURL")
                        .HasColumnType("text");

                    b.Property<int>("MarcaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("numeric");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("integer");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EstadoProductoId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("productos");
                });

            modelBuilder.Entity("StockManager.Models.Proveedor", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProveedorId"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstadoProveedorId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NombreContacto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RNC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProveedorId");

                    b.HasIndex("EstadoProveedorId");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("StockManager.Models.RegistroPago", b =>
                {
                    b.Property<int>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PagoId"));

                    b.Property<int?>("CuentaPorCobrarId")
                        .HasColumnType("integer");

                    b.Property<int?>("CuentaPorPagarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("PagoId");

                    b.HasIndex("CuentaPorCobrarId");

                    b.HasIndex("CuentaPorPagarId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RegistrosPagos");
                });

            modelBuilder.Entity("StockManager.Models.TipoUsuario", b =>
                {
                    b.Property<int>("TipoUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TipoUsuarioId"));

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TipoUsuarioId");

                    b.ToTable("TiposUsuarios");
                });

            modelBuilder.Entity("StockManager.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FotoURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupabaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoUsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("UsuarioId");

                    b.HasIndex("TipoUsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Venta", b =>
                {
                    b.Property<int>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VentaId"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("VentaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("DetalleVenta", b =>
                {
                    b.HasOne("StockManager.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Venta", "Venta")
                        .WithMany("Detalles")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("StockManager.Models.Clientes", b =>
                {
                    b.HasOne("StockManager.Models.EstadoCliente", "EstadoCliente")
                        .WithMany("Clientes")
                        .HasForeignKey("EstadoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoCliente");
                });

            modelBuilder.Entity("StockManager.Models.CuentaPorCobrar", b =>
                {
                    b.HasOne("StockManager.Models.Clientes", "Clientes")
                        .WithMany("CuentaPorCobrar")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.EstadoCuenta", "EstadoCuenta")
                        .WithMany("CuentaPorCobrar")
                        .HasForeignKey("EstadoCuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.Factura", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clientes");

                    b.Navigation("EstadoCuenta");

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("StockManager.Models.CuentaPorPagar", b =>
                {
                    b.HasOne("StockManager.Models.EstadoCuenta", "EstadoCuenta")
                        .WithMany("CuentaPorPagar")
                        .HasForeignKey("EstadoCuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.OrdenCompra", "OrdenCompra")
                        .WithMany()
                        .HasForeignKey("OrdenCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoCuenta");

                    b.Navigation("OrdenCompra");
                });

            modelBuilder.Entity("StockManager.Models.Factura", b =>
                {
                    b.HasOne("StockManager.Models.Clientes", "Cliente")
                        .WithMany("Facturas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.EstadoFactura", "EstadoFactura")
                        .WithMany("Facturas")
                        .HasForeignKey("EstadoFacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.Usuario", "Usuario")
                        .WithMany("Facturas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EstadoFactura");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("StockManager.Models.FacturaDetalle", b =>
                {
                    b.HasOne("StockManager.Models.Factura", "Factura")
                        .WithMany("Detalles")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.Producto", "Producto")
                        .WithMany("FacturaDetalles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factura");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("StockManager.Models.Notificacion", b =>
                {
                    b.HasOne("StockManager.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("StockManager.Models.OrdenCompra", b =>
                {
                    b.HasOne("StockManager.Models.EstadoOrdenCompra", "EstadoOrdenCompra")
                        .WithMany("OrdenesCompra")
                        .HasForeignKey("EstadoOrdenCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.Proveedor", "Proveedor")
                        .WithMany("OrdenesCompra")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.Usuario", "Usuario")
                        .WithMany("OrdenesCompra")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoOrdenCompra");

                    b.Navigation("Proveedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("StockManager.Models.OrdenCompraDetalle", b =>
                {
                    b.HasOne("StockManager.Models.OrdenCompra", "OrdenCompra")
                        .WithMany("Detalles")
                        .HasForeignKey("OrdenCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.Producto", "Producto")
                        .WithMany("OrdenesDetalle")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenCompra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("StockManager.Models.Producto", b =>
                {
                    b.HasOne("StockManager.Models.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.EstadoProducto", "EstadoProducto")
                        .WithMany("Productos")
                        .HasForeignKey("EstadoProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Models.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("EstadoProducto");

                    b.Navigation("Marca");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("StockManager.Models.Proveedor", b =>
                {
                    b.HasOne("StockManager.Models.EstadoProveedor", "EstadoProveedor")
                        .WithMany("Proveedores")
                        .HasForeignKey("EstadoProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoProveedor");
                });

            modelBuilder.Entity("StockManager.Models.RegistroPago", b =>
                {
                    b.HasOne("StockManager.Models.CuentaPorCobrar", "CuentaPorCobrar")
                        .WithMany("Pagos")
                        .HasForeignKey("CuentaPorCobrarId");

                    b.HasOne("StockManager.Models.CuentaPorPagar", "CuentaPorPagar")
                        .WithMany("Pagos")
                        .HasForeignKey("CuentaPorPagarId");

                    b.HasOne("StockManager.Models.Usuario", "Usuario")
                        .WithMany("PagosRegistrados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaPorCobrar");

                    b.Navigation("CuentaPorPagar");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("StockManager.Models.Usuario", b =>
                {
                    b.HasOne("StockManager.Models.TipoUsuario", "TipoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("Venta", b =>
                {
                    b.HasOne("StockManager.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("StockManager.Models.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("StockManager.Models.Clientes", b =>
                {
                    b.Navigation("CuentaPorCobrar");

                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("StockManager.Models.CuentaPorCobrar", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("StockManager.Models.CuentaPorPagar", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("StockManager.Models.EstadoCliente", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("StockManager.Models.EstadoCuenta", b =>
                {
                    b.Navigation("CuentaPorCobrar");

                    b.Navigation("CuentaPorPagar");
                });

            modelBuilder.Entity("StockManager.Models.EstadoFactura", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("StockManager.Models.EstadoOrdenCompra", b =>
                {
                    b.Navigation("OrdenesCompra");
                });

            modelBuilder.Entity("StockManager.Models.EstadoProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("StockManager.Models.EstadoProveedor", b =>
                {
                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("StockManager.Models.Factura", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("StockManager.Models.Marca", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("StockManager.Models.OrdenCompra", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("StockManager.Models.Producto", b =>
                {
                    b.Navigation("FacturaDetalles");

                    b.Navigation("OrdenesDetalle");
                });

            modelBuilder.Entity("StockManager.Models.Proveedor", b =>
                {
                    b.Navigation("OrdenesCompra");
                });

            modelBuilder.Entity("StockManager.Models.TipoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("StockManager.Models.Usuario", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("OrdenesCompra");

                    b.Navigation("PagosRegistrados");
                });

            modelBuilder.Entity("Venta", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
