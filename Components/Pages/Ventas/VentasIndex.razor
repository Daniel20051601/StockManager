@page "/Ventas/Facturar"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using StockManager.Dal
@using StockManager.Models
@inject IDbContextFactory<Contexto> DbContextFactory
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceProvider ServiceProvider
@rendermode InteractiveServer

<PageTitle>Facturar</PageTitle>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid py-4">
        <div class="card shadow-lg">
            <div class="card-body p-4">
                <h3 class="fw-semibold mb-4">Facturación</h3>

                <div class="row mb-3 align-items-center">
                    <div class="col-12 col-md-4 col-lg-3 mb-3 mb-md-0">
                        <select class="form-select" @bind="filtro">
                            <option value="Nombre">Nombre</option>
                            <option value="Codigo">Código</option>
                            <option value="Proveedor">Proveedor</option>
                            <option value="Marca">Marca</option>
                        </select>
                    </div>
                    <div class="col-12 col-md-8 col-lg-6">
                        <div class="input-group">
                            <input class="form-control" @bind="valorFiltro" placeholder="Buscar producto..." @onkeydown="@OnKeyDown" />
                            <button class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search"></i> Buscar</button>
                            <button class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-repeat"></i> Restablecer</button>
                        </div>
                    </div>
                </div>

                @if (productos.Any())
                {
                    <div class="table-responsive mb-4">
                        <h5 class="mb-3">Resultados de búsqueda</h5>
                        <table class="table table-hover align-middle shadow-sm">
                            <thead class="table-light">
                                <tr>
                                    <th>Código</th>
                                    <th>Producto</th>
                                    <th>Marca</th>
                                    <th>Proveedor</th>
                                    <th>Precio</th>
                                    <th>Stock</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var producto in productos)
                                {
                                    <tr>
                                        <td>@producto.Codigo</td>
                                        <td>@producto.Nombre</td>
                                        <td>@producto.Marca?.Nombre</td>
                                        <td>@producto.Proveedor?.Nombre</td>
                                        <td>@producto.PrecioVenta.ToString("N2")</td>
                                        <td>@producto.Stock</td>
                                        <td>
                                            <button class="btn btn-sm btn-success" @onclick="() => AgregarAlCarrito(producto)">
                                                <i class="bi bi-cart-plus"></i> Agregar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }

                <div class="row mt-4">
                    <div class="col-12 col-lg-8">
                        <h5>Carrito</h5>
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-secondary">
                                    <tr>
                                        <th>Producto</th>
                                        <th>Cantidad</th>
                                        <th>Precio Unitario</th>
                                        <th>Total</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in carrito)
                                    {
                                        <tr>
                                            <td>@item.Producto.Nombre</td>
                                            <td>
                                                <input type="number"
                                                       class="form-control form-control-sm"
                                                       value="@item.Cantidad" @onchange="e => ActualizarCantidad(item, e)" min="1" />
                                            </td>
                                            <td>@item.Producto.PrecioVenta.ToString("N2")</td>
                                            <td>@(item.Cantidad * item.Producto.PrecioVenta)</td>
                                            <td><button class="btn btn-sm btn-danger" @onclick="() => QuitarDelCarrito(item)"><i class="bi bi-x-circle"></i></button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="col-12 col-lg-4 mt-4 mt-lg-0">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">Resumen</h5>
                                <p><strong>Usuario:</strong> @nombreUsuario</p>
                                <p><strong>Total:</strong> @totalVenta)</p>
                                <button class="btn btn-primary w-100" @onclick="MostrarModalPago" disabled="@(!carrito.Any())">
                                    <i class="bi bi-cash-coin"></i> Finalizar Venta
                                </button>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(mensajeError))
                        {
                            <div class="alert alert-danger mt-3">@mensajeError</div>
                        }
                        @if (!string.IsNullOrEmpty(mensajeExito))
                        {
                            <div class="alert alert-success mt-3">@mensajeExito</div>
                        }
                    </div>
                </div>

                @* Resto de tu código permanece igual *@
                @* ... (modal factura, modal pago, etc.) *@
            </div>
        </div>
    </div>
}

@code {
    private List<Producto> productos = new();
    private List<ItemVenta> carrito = new();
    private bool isLoading = true;
    private string filtro = "Nombre";
    private string valorFiltro = "";
    private string mensajeError = "";
    private string mensajeExito = "";
    private bool mostrarFacturaModal = false;
    private Venta? ventaActual = null;
    private decimal montoPagado = 0;
    private decimal devuelta = 0;
    private bool mostrarModalPago = false;
    private decimal montoTemporalPago = 0;
    private string mensajeErrorPago = "";

    private string nombreUsuario = "Invitado";

    private decimal totalVenta => carrito.Sum(i => i.Cantidad * i.Producto.PrecioVenta);

    protected override async Task OnInitializedAsync()
    {
        // Carga inicial
        isLoading = false;

        // Obtener usuario logueado
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            nombreUsuario = user.Identity.Name ?? "Usuario";

            // Opcional: obtener nombre personalizado desde la base local con UsuarioId claim
            var usuarioIdClaim = user.FindFirst("UsuarioId");
            if (usuarioIdClaim != null && int.TryParse(usuarioIdClaim.Value, out int usuarioId))
            {
                using var scope = ServiceProvider.CreateScope();
                var contexto = scope.ServiceProvider.GetRequiredService<Contexto>();

                var usuario = await contexto.Usuarios.FindAsync(usuarioId);
                if (usuario != null && !string.IsNullOrWhiteSpace(usuario.NombreUsuario))
                {
                    nombreUsuario = usuario.NombreUsuario;
                }
            }
        }
    }

    // El resto de métodos queda igual, no lo copio para no hacer mucho largo
    // AgregarAlCarrito, Buscar, Restablecer, etc...

    // Copia todo tu código original aquí abajo
    // ...
    // (No cambia nada más, solo el cambio en nombreUsuario)

    private async Task Buscar() => await BuscarProductos();

    private async Task Restablecer()
    {
        valorFiltro = "";
        productos.Clear();
    }

    private async Task BuscarProductos()
    {
        await using var contexto = await DbContextFactory.CreateDbContextAsync();
        var query = contexto.productos.Include(p => p.Marca).Include(p => p.Proveedor)
            .Where(p => p.EstadoProductoId == 1 && p.Stock > 0).AsQueryable();

        if (!string.IsNullOrWhiteSpace(valorFiltro))
        {
            var valor = valorFiltro.ToLower();
            query = filtro switch
            {
                "Codigo" => query.Where(p => p.Codigo.ToLower().Contains(valor)),
                "Proveedor" => query.Where(p => p.Proveedor != null && p.Proveedor.Nombre.ToLower().Contains(valor)),
                "Marca" => query.Where(p => p.Marca != null && p.Marca.Nombre.ToLower().Contains(valor)),
                _ => query.Where(p => p.Nombre.ToLower().Contains(valor))
            };

            productos = await query.OrderBy(p => p.Nombre).ToListAsync();
        }
        else
        {
            productos.Clear();
        }
    }

    private void AgregarAlCarrito(Producto producto)
    {
        mensajeError = "";
        if (producto.Stock <= 0)
        {
            mensajeError = $"No hay stock disponible para el producto: {producto.Nombre}";
            return;
        }

        var existente = carrito.FirstOrDefault(c => c.Producto.ProductoId == producto.ProductoId);
        if (existente != null)
        {
            if (existente.Cantidad < producto.Stock)
                existente.Cantidad++;
            else
                mensajeError = $"No hay más stock disponible para {producto.Nombre}";
        }
        else
        {
            carrito.Add(new ItemVenta { Producto = producto, Cantidad = 1 });
        }
    }

    private void QuitarDelCarrito(ItemVenta item) => carrito.Remove(item);

    private void ActualizarCantidad(ItemVenta item, ChangeEventArgs e)
    {
        mensajeError = "";

        if (int.TryParse(e.Value?.ToString(), out int nuevaCantidad))
        {
            if (nuevaCantidad <= 0)
            {
                mensajeError = $"La cantidad para {item.Producto.Nombre} debe ser al menos 1. Se ha eliminado del carrito.";
                carrito.Remove(item);
            }
            else if (nuevaCantidad > item.Producto.Stock)
            {
                mensajeError = $"No hay suficiente stock para {item.Producto.Nombre}. Stock disponible: {item.Producto.Stock}.";
                item.Cantidad = item.Producto.Stock;
            }
            else
            {
                item.Cantidad = nuevaCantidad;
            }
        }
        else
        {
            mensajeError = $"Valor inválido para la cantidad de {item.Producto.Nombre}.";
        }

        StateHasChanged();
    }

    private void MostrarModalPago()
    {
        mensajeError = "";
        mensajeExito = "";
        montoTemporalPago = 0;
        mensajeErrorPago = "";
        mostrarModalPago = true;
    }

    private void CerrarModalPago()
    {
        mostrarModalPago = false;
        mensajeErrorPago = "";
    }

    private async Task ProcesarPago()
    {
        if (montoTemporalPago >= totalVenta)
        {
            montoPagado = montoTemporalPago;
            devuelta = montoTemporalPago - totalVenta;
            CerrarModalPago();
            await FinalizarVenta();
        }
        else
        {
            mensajeErrorPago = "Monto inválido o menor al total.";
        }
    }

    private async Task FinalizarVenta()
    {
        mensajeError = "";
        mensajeExito = "";
        mostrarFacturaModal = false;
        ventaActual = null;

        await using var contexto = await DbContextFactory.CreateDbContextAsync();
        using var transaccion = await contexto.Database.BeginTransactionAsync();

        try
        {

            ventaActual = new Venta
                {
                    Fecha = DateTime.UtcNow,
                    Total = totalVenta,
                    Cliente = new Cliente { Nombre = "Al Contado" },
                    Detalles = carrito.Select(item => new DetalleVenta
                    {
                        Producto = item.Producto,
                        ProductoId = item.Producto.ProductoId,
                        Cantidad = item.Cantidad,
                        PrecioUnitario = item.Producto.PrecioVenta
                    }).ToList()
                };

            foreach (var item in carrito)
            {
                var productoDb = await contexto.productos.FirstOrDefaultAsync(p => p.ProductoId == item.Producto.ProductoId);
                if (productoDb == null || productoDb.Stock < item.Cantidad)
                {
                    mensajeError = $"Stock insuficiente para el producto: {item.Producto.Nombre}";
                    await transaccion.RollbackAsync();
                    return;
                }
                productoDb.Stock -= item.Cantidad;
            }

            contexto.Ventas.Add(ventaActual);

            await contexto.SaveChangesAsync();
            await transaccion.CommitAsync();

            mostrarFacturaModal = true;
            mensajeExito = "Venta procesada correctamente.";
            carrito.Clear();
            productos.Clear();
        }
        catch (Exception ex)
        {
            await transaccion.RollbackAsync();
            mensajeError = "Error al procesar la venta: " + (ex.InnerException?.Message ?? ex.Message);
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Buscar();
        }
    }

    private async Task ImprimirFactura()
    {
        if (ventaActual == null) return;

        var html = $@"<html><head><title>Factura</title><style>body {{ font-family: Arial; font-size: 14px; }} table {{ width: 100%; border-collapse: collapse; margin-top: 10px; }} th, td {{ border: 1px solid #000; padding: 6px; text-align: left; }} th {{ background-color: #f2f2f2; }} h2 {{ text-align: center; }}</style></head><body><h2>Factura</h2><p><strong>Cliente:</strong> {ventaActual.Cliente?.Nombre}</p><p><strong>Fecha:</strong> {ventaActual.Fecha.ToLocalTime():dd/MM/yyyy HH:mm}</p><table><thead><tr><th>Producto</th><th>Cantidad</th><th>Precio Unitario</th><th>Total</th></tr></thead><tbody>";

        foreach (var item in ventaActual.Detalles)
        {
            html += $"<tr><td>{item.Producto?.Nombre}</td><td>{item.Cantidad}</td><td>{item.PrecioUnitario.ToString("N2")}</td><td>{(item.Cantidad * item.PrecioUnitario).ToString("N2")}</td></tr>";
        }

        html += $"</tbody><tfoot><tr><td colspan='3'><strong>Total</strong></td><td><strong>{ventaActual.Total.ToString("N2")}</strong></td></tr><tr><td colspan='3'><strong>Pagado</strong></td><td>{montoPagado.ToString("N2")}</td></tr><tr><td colspan='3'><strong>Devuelta</strong></td><td>{devuelta.ToString("N2")}</td></tr></tfoot></table></body></html>";

        await JS.InvokeVoidAsync("imprimirHtml", html);
    }

    private class ItemVenta
    {
        public Producto Producto { get; set; } = default!;
        public int Cantidad { get; set; }
    }
}
