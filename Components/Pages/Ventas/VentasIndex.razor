@page "/Ventas/Facturar"
@using Microsoft.EntityFrameworkCore
@using StockManager.Dal
@using StockManager.Models
@inject IDbContextFactory<Contexto> DbContextFactory
@rendermode InteractiveServer

<PageTitle>Facturar</PageTitle>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <div class="mt-5">
        <h3 class="fw-semibold mb-4">Facturación</h3>

        <div class="row mb-3">
            <div class="col-md-3">
                <select class="form-select" @bind="filtro">
                    <option value="Nombre">Nombre</option>
                    <option value="Codigo">Código</option>
                    <option value="Proveedor">Proveedor</option>
                    <option value="Marca">Marca</option>
                </select>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <input class="form-control" @bind="valorFiltro" placeholder="Buscar producto..." @onkeydown="@OnKeyDown" />
                    <button class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    <button class="btn btn-outline-secondary bi bi-arrow-repeat" @onclick="Restablecer"></button>
                </div>
            </div>
        </div>

        @if (productos.Any())
        {
            <div class="table-responsive mb-4">
                <h5 class="mb-3">Resultados de búsqueda</h5>
                <table class="table table-hover align-middle shadow-sm">
                    <thead class="table-light">
                        <tr>
                            <th>Código</th>
                            <th>Producto</th>
                            <th>Marca</th>
                            <th>Proveedor</th>
                            <th>Precio</th>
                            <th>Stock</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var producto in productos)
                        {
                            <tr>
                                <td>@producto.Codigo</td>
                                <td>@producto.Nombre</td>
                                <td>@producto.Marca?.Nombre</td>
                                <td>@producto.Proveedor?.Nombre</td>
                                <td>@producto.PrecioVenta.ToString("0.00")</td>
                                <td>@producto.Stock</td>
                                <td>
                                    <button class="btn btn-sm btn-success" @onclick="() => AgregarAlCarrito(producto)">
                                        <i class="bi bi-cart-plus"></i> Agregar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        <div class="row mt-4">
            <div class="col-md-8">
                <h5>Carrito</h5>
                <table class="table table-bordered">
                    <thead class="table-secondary">
                        <tr>
                            <th>Producto</th>
                            <th>Cantidad</th>
                            <th>Precio Unitario</th>
                            <th>Total</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in carrito)
                        {
                            <tr>
                                <td>@item.Producto.Nombre</td>
                                <td>@item.Cantidad</td>
                                <td>@item.Producto.PrecioVenta.ToString("0.00")</td>
                                <td>@(item.Cantidad* item.Producto.PrecioVenta).ToString("0.00")</td>
                                <td><button class="btn btn-sm btn-danger" @onclick="() => QuitarDelCarrito(item)"><i class="bi bi-x"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="col-md-4">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Resumen</h5>
                        <p><strong>Usuario:</strong> Admin</p>
                        <p><strong>Total:</strong> @totalVenta.ToString("0.00")</p>
                        <button class="btn btn-primary w-100" @onclick="FinalizarVenta" disabled="@(!carrito.Any())">
                            Finalizar Venta
                        </button>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <div class="alert alert-danger mt-3">@mensajeError</div>
                }
                @if (!string.IsNullOrEmpty(mensajeExito))
                {
                    <div class="alert alert-success mt-3">@mensajeExito</div>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<Producto> productos = new();
    private List<ItemVenta> carrito = new();
    private bool isLoading = true;
    private string filtro = "Nombre";
    private string valorFiltro = "";
    private string mensajeError = "";
    private string mensajeExito = "";
    private decimal totalVenta => carrito.Sum(i => i.Cantidad * i.Producto.PrecioVenta);

    protected override async Task OnInitializedAsync()
    {
        isLoading = false;
    }

    private async Task Buscar() => await BuscarProductos();

    private async Task Restablecer()
    {
        valorFiltro = "";
        productos.Clear();
    }

    private async Task BuscarProductos()
    {
        await using var contexto = await DbContextFactory.CreateDbContextAsync();
        var query = contexto.productos
            .Include(p => p.Marca)
            .Include(p => p.Proveedor)
            .Where(p => p.EstadoProductoId == 1 && p.Stock > 0)
            .AsQueryable();

        if (!string.IsNullOrWhiteSpace(valorFiltro))
        {
            var valor = valorFiltro.ToLower();
            query = filtro switch
            {
                "Codigo" => query.Where(p => p.Codigo.ToLower().Contains(valor)),
                "Proveedor" => query.Where(p => p.Proveedor != null && p.Proveedor.Nombre.ToLower().Contains(valor)),
                "Marca" => query.Where(p => p.Marca != null && p.Marca.Nombre.ToLower().Contains(valor)),
                _ => query.Where(p => p.Nombre.ToLower().Contains(valor)),
            };

            productos = await query.OrderBy(p => p.Nombre).ToListAsync();
        }
        else
        {
            productos.Clear();
        }
    }

    private void AgregarAlCarrito(Producto producto)
    {
        var existente = carrito.FirstOrDefault(c => c.Producto.ProductoId == producto.ProductoId);
        if (existente != null)
        {
            if (existente.Cantidad < producto.Stock)
                existente.Cantidad++;
        }
        else
        {
            carrito.Add(new ItemVenta { Producto = producto, Cantidad = 1 });
        }
    }

    private void QuitarDelCarrito(ItemVenta item)
    {
        carrito.Remove(item);
    }

    private async Task FinalizarVenta()
    {
        mensajeError = "";
        mensajeExito = "";

        await using var contexto = await DbContextFactory.CreateDbContextAsync();
        using var transaccion = await contexto.Database.BeginTransactionAsync();

        try
        {
            if (!carrito.Any())
            {
                mensajeError = "El carrito está vacío.";
                return;
            }

            var estadoCliente = await contexto.EstadosClientes.FirstOrDefaultAsync(e => e.EstadoClienteId == 1);
            if (estadoCliente == null)
            {
                estadoCliente = new EstadoCliente
                {
                    EstadoClienteId = 1,
                    Nombre = "Activo"
                };
                contexto.EstadosClientes.Add(estadoCliente);
                await contexto.SaveChangesAsync();
            }

            var clienteContado = await contexto.Clientes.FirstOrDefaultAsync(c => c.Nombre == "Al Contado");
            if (clienteContado == null)
            {
                clienteContado = new Clientes
                {
                    Nombre = "Al Contado",
                    Direccion = "N/A",
                    Telefono = "000000000",
                    RNCCedula = "000000000",
                    Email = "noreply@local",
                    EstadoClienteId = estadoCliente.EstadoClienteId
                };
                contexto.Clientes.Add(clienteContado);
                await contexto.SaveChangesAsync();
            }

            var venta = new Venta
            {
                Fecha = DateTime.UtcNow,
                Total = totalVenta,
                ClienteId = clienteContado.ClienteId,
                Detalles = carrito.Select(item => new DetalleVenta
                {
                    ProductoId = item.Producto.ProductoId,
                    Cantidad = item.Cantidad,
                    PrecioUnitario = item.Producto.PrecioVenta
                }).ToList()
            };

            contexto.Ventas.Add(venta);

            foreach (var item in carrito)
            {
                var productoDb = await contexto.productos.FirstOrDefaultAsync(p => p.ProductoId == item.Producto.ProductoId);
                if (productoDb == null || productoDb.Stock < item.Cantidad)
                {
                    mensajeError = $"Stock insuficiente para el producto: {item.Producto.Nombre}";
                    return;
                }

                productoDb.Stock -= item.Cantidad;
            }

            await contexto.SaveChangesAsync();
            await transaccion.CommitAsync();

            mensajeExito = "Venta registrada exitosamente.";
            carrito.Clear();
            productos.Clear();
        }
        catch (Exception ex)
        {
            await transaccion.RollbackAsync();
            mensajeError = "Error al guardar la venta: " + (ex.InnerException?.Message ?? ex.Message);
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Buscar();
        }
    }

    private class ItemVenta
    {
        public Producto Producto { get; set; } = default!;
        public int Cantidad { get; set; }
    }
}
