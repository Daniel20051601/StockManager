@page "/Ventas/HistorialFacturas"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using StockManager.Dal
@using StockManager.Models
@inject IDbContextFactory<Contexto> DbContextFactory
@inject NavigationManager Navigation

<PageTitle>Historial de Facturas</PageTitle>

<h3>Historial de Facturas</h3>

<div class="mb-3 row">
    <label class="col-sm-2 col-form-label">Buscar por Fecha:</label>
    <div class="col-sm-4">
        <input type="date" class="form-control" @bind="filtroFecha" />
    </div>
</div>

<button class="btn btn-primary mb-3" @onclick="BuscarFacturas">Buscar</button>
<button class="btn btn-secondary mb-3 ms-2" @onclick="RestablecerFiltros">Restablecer</button>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else if (!facturas.Any())
{
    <p>No se encontraron facturas.</p>
}
else
{
    <table class="table table-striped table-bordered align-middle">
        <thead class="table-dark">
            <tr>
                <th>Factura ID</th>
                <th>Fecha</th>
                <th>Total</th>
                <th>Detalles</th>
               
            </tr>
        </thead>
        <tbody>
            @foreach (var venta in facturas)
            {
                <tr>
                    <td>@venta.VentaId</td>
                    <td>@venta.Fecha.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@venta.Total</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="@(() => VerFactura(venta.VentaId))">Ver</button>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Venta> facturas = new();
    private bool isLoading = false;
    private DateTime? filtroFecha = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarFacturas();
    }

    private async Task CargarFacturas()
    {
        isLoading = true;
        await using var contexto = await DbContextFactory.CreateDbContextAsync();

        facturas = await contexto.Ventas
            .Include(v => v.Detalles)
                .ThenInclude(d => d.Producto)
            .OrderByDescending(v => v.Fecha)
            .Take(50)
            .ToListAsync();

        isLoading = false;
        StateHasChanged();
    }

    private async Task BuscarFacturas()
    {
        isLoading = true;
        await using var contexto = await DbContextFactory.CreateDbContextAsync();

        var query = contexto.Ventas
            .Include(v => v.Detalles)
                .ThenInclude(d => d.Producto)
            .AsQueryable();

        if (filtroFecha.HasValue)
        {
            var inicio = filtroFecha.Value.Date;
            var fin = inicio.AddDays(1);
            query = query.Where(v => v.Fecha >= inicio && v.Fecha < fin);
        }

        facturas = await query.OrderByDescending(v => v.Fecha).ToListAsync();

        isLoading = false;
        StateHasChanged();
    }

    private void RestablecerFiltros()
    {
        filtroFecha = null;
        _ = CargarFacturas();
    }

    private void VerFactura(int id)
    {
        Navigation.NavigateTo($"/Ventas/VerFactura/{id}");
    }


}
