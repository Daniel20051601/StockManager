@page "/Productos/Index"
@using Microsoft.EntityFrameworkCore
@using StockManager.Dal
@rendermode InteractiveServer

@inject Contexto _contexto

<PageTitle>Productos</PageTitle>

<style>
    .table-striped-custom tbody tr:nth-child(odd) {
        background-color: #ffffff;
    }

    .table-striped-custom tbody tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .dropdown-toggle::after {
        display: none;
    }

    .action-btn {
        border: none;
        background: transparent;
        font-size: 1.5rem;
        line-height: 1;
        color: #6c757d;
    }

    .dropdown-menu {
        font-size: 0.9rem;
    }
</style>

<div class="mt-5">
    <div class="row mb-5">
        <div class="col">
            <h3 class="fw-semibold">Productos</h3>
        </div>
        <div class="col-auto d-flex align-items-center gap-3">
            <input class="form-control shadow-sm text-secondary" style="width: 250px;" placeholder="Buscar..." />
            <a href="#" class="btn btn-outline bi bi-bell text-secondary shadow-sm"></a>
        </div>
    </div>

    <div class="row d-flex justify-content-between mb-5">
        <div class="col-auto">
            <button type="button" class="btn btn-outline">Resumen</button>
            <button type="button" class="btn btn-outline text-secondary ms-4">Solicitudes</button>
            <button type="button" class="btn btn-outline text-secondary ms-4">Notificaciones</button>
        </div>
        <div class="col-auto">
            <div class="d-flex align-items-center">
                <a href="/Productos/Nuevo" class="btn btn-success shadow-sm d-flex align-items-center">
                    <i class="bi bi-plus-circle me-2"></i> Nuevo
                </a>
                <div class="dropdown ms-3">
                    <button class="btn btn-outline dropdown-toggle shadow-sm" type="button" data-bs-toggle="dropdown">
                        Mostrar
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#">Activos</a></li>
                        <li><a class="dropdown-item" href="#">Inactivos</a></li>
                        <li><a class="dropdown-item" href="#">Todos</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="table-responsive mt-4">
        <table class="table table-hover align-middle shadow-sm table-striped-custom">
            <thead class="table-light">
                <tr>
                    <th style="width: 80px;">Código</th>
                    <th style="width: 80px;">Imagen</th>
                    <th style="width: 100px;">Categoría</th>
                    <th style="width: 180px;">Producto</th>
                    <th style="width: 200px;">Descripción</th>
                    <th style="width: 180px;">Proveedor</th>
                    <th style="width: 120px;">Marca</th>
                    <th style="width: 80px;">Estado</th>
                    <th style="width: 80px;">Stock</th>
                    <th style="width: 130px;">Precio de Compra</th>
                    <th style="width: 130px;">Precio de Venta</th>
                    <th style="width: 50px;">Editar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in productos)
                {
                    <tr>
                        <td>@producto.Codigo</td>
                        <td>
                            <img src="imagenes/productos/@producto.ImagenURL" alt="@producto.Nombre" width="45" />
                        </td>
                        <td>@producto.Categoria?.Nombre</td>
                        <td>@producto.Nombre</td>
                        <td>@producto.Descripcion</td>
                        <td>@producto.Proveedor</td>
                        <td>@producto.Marca?.Nombre</td>
                        <td>
                            <span class="badge @(producto.EstadoProductoId == 1 ? "bg-success" : "bg-secondary")">
                                @(producto.EstadoProductoId == 1 ? "Activo" : "Inactivo")
                            </span>
                        </td>
                        <td>@producto.Stock</td>
                        <td>@producto.PrecioCompra.ToString("0.00")</td>
                        <td>@producto.PrecioVenta.ToString("0.00")</td>
                        <td>
                            <div class="dropdown">
                                <button class="action-btn" type="button" data-bs-toggle="dropdown">⋮</button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="/Mermas/Index">Agregar a mermas</a></li>
                                    <li><button class="dropdown-item text-danger" @onclick="() => EliminarProducto(producto.ProductoId)">Eliminar</button></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-end mt-3">
        <nav>
            <ul class="pagination">
                <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PaginaAnterior">Anterior</button>
                </li>
                @for (int i = 1; i <= totalPaginas; i++)
                {
                    <li class="page-item @(paginaActual == i ? "active" : "")">
                        <button class="page-link" @onclick="@(() => CambiarPagina(i))">@i</button>
                    </li>
                }
                <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                    <button class="page-link" @onclick="PaginaSiguiente">Siguiente</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

@code {
    private List<Producto> productos = new();
    private int paginaActual = 1;
    private int totalPaginas;
    private int cantidadPorPagina = 10;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        var totalRegistros = await _contexto.productos.CountAsync();
        totalPaginas = (int)Math.Ceiling(totalRegistros / (double)cantidadPorPagina);

        productos = await _contexto.productos
            .Include(p => p.Categoria)
            .Include(p => p.Marca)
            .OrderBy(p => p.ProductoId)
            .Skip((paginaActual - 1) * cantidadPorPagina)
            .Take(cantidadPorPagina)
            .ToListAsync();

        foreach (var producto in productos)
        {
            if (string.IsNullOrEmpty(producto.ImagenURL))
            {
                producto.ImagenURL = "default-image.jpg";
            }
        }
    }

    private async Task PaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            await CargarProductos();
        }
    }

    private async Task PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
        {
            paginaActual++;
            await CargarProductos();
        }
    }

    private async Task CambiarPagina(int pagina)
    {
        paginaActual = pagina;
        await CargarProductos();
    }

    private async Task EliminarProducto(int id)
    {
        var producto = await _contexto.productos.FindAsync(id);
        if (producto != null)
        {
            _contexto.productos.Remove(producto);
            await _contexto.SaveChangesAsync();

            productos.Remove(productos.First(p => p.ProductoId == id));
            await CargarProductos();
        }
    }
}
