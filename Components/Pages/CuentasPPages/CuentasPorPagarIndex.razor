@page "/CuentasPorPagar/Index"
@rendermode InteractiveServer
@using StockManager.Dal
@using StockManager.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Contexto> DbFactory
@inject NavigationManager Navigation

<PageTitle>Cuentas</PageTitle>

<style>
    .table-striped-custom tbody tr:nth-child(odd) {
        background-color: #ffffff;
    }

    .table-striped-custom tbody tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .btn-crear {
        background-color: #28a745;
        border-color: #28a745;
        color: white;
    }

        .btn-crear:hover {
            background-color: #218838;
            border-color: #1e7e34;
            color: white;
        }
</style>

<div class="mt-5">
    <div class="row mb-4">
        <div class="col">
            <h3 class="fw-semibold">Cuentas</h3>
        </div>
        <div class="col-auto d-flex align-items-center gap-3">
            <input @bind="terminoBusqueda" @bind:event="oninput" @onkeyup="BuscarCuentas"
                   class="form-control shadow-sm text-secondary" style="width: 250px;" placeholder="Buscar..." />
            <button type="button" class="btn btn-crear shadow-sm" @onclick="CrearNuevaCuenta">
                <i class="bi bi-plus-circle me-2"></i>Crear
            </button>
        </div>
    </div>

    <div class="table-responsive mt-4">
        <table class="table table-hover align-middle shadow-sm table-striped-custom">
            <thead class="table-light">
                <tr>
                    <th>Editar</th>
                    <th>Orden Compra</th>
                    <th>Proveedor</th>
                    <th>Monto Total</th>
                    <th>Saldo Pendiente</th>
                    <th>Fecha Emisión</th>
                    <th>Fecha Límite</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cuenta in cuentasPaginadas)
                {
                    <tr>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditarCuenta(cuenta.CuentaPorPagarId)">
                                <i class="bi bi-pencil-fill"></i>
                            </button>
                        </td>
                        <td>#@cuenta.OrdenCompraId</td>
                        <td>@cuenta.OrdenCompra.Proveedor.Nombre</td>
                        <td>@cuenta.MontoTotal.ToString("C", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td>@cuenta.SaldoPendiente.ToString("C", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td>@cuenta.FechaEmision.ToString("dd/MM/yyyy")</td>
                        <td>@cuenta.FechaLimitePago.ToString("dd/MM/yyyy")</td>
                        <td>@cuenta.EstadoCuenta.Nombre</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (!cuentasFiltradas.Any())
    {
        <div class="text-center py-4">
            <i class="bi bi-search display-1 text-muted"></i>
            <p class="text-muted">No se encontraron cuentas.</p>
        </div>
    }
</div>

@code {
    private List<CuentaPorPagar> cuentas = new();
    private List<CuentaPorPagar> cuentasFiltradas = new();
    private string terminoBusqueda = string.Empty;

    private int paginaActual = 1;
    private int elementosPorPagina = 10;
    private int totalPaginas => (int)Math.Ceiling((double)cuentasFiltradas.Count / elementosPorPagina);
    private List<CuentaPorPagar> cuentasPaginadas => cuentasFiltradas
        .Skip((paginaActual - 1) * elementosPorPagina)
        .Take(elementosPorPagina)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        using var context = DbFactory.CreateDbContext();
        cuentas = await context.CuentasPorPagar
            .Include(c => c.OrdenCompra)
                .ThenInclude(o => o.Proveedor)
            .Include(c => c.EstadoCuenta)
            .ToListAsync();

        cuentasFiltradas = cuentas;
    }

    private void BuscarCuentas()
    {
        if (string.IsNullOrWhiteSpace(terminoBusqueda))
        {
            cuentasFiltradas = cuentas;
        }
        else
        {
            var termino = terminoBusqueda.ToLower();
            cuentasFiltradas = cuentas.Where(c =>
                c.OrdenCompra.Proveedor.Nombre.ToLower().Contains(termino) ||
                c.MontoTotal.ToString().Contains(termino) ||
                c.SaldoPendiente.ToString().Contains(termino)
            ).ToList();
        }

        paginaActual = 1;
        StateHasChanged();
    }

    private void EditarCuenta(int id)
    {
        Navigation.NavigateTo($"/CuentasPorPagar/Edit/{id}");
    }

    private void CrearNuevaCuenta()
    {
        Navigation.NavigateTo("/CuentasPorPagar/Create");
    }
}
