@page "/CuentasPorPagar/Edit/{Id:int}"
@rendermode InteractiveServer
@using StockManager.Models
@using StockManager.Dal
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Contexto> DbFactory
@inject NavigationManager Navigation
@inject Blazored.Toast.Services.IToastService toastService

<PageTitle>Editar Cuenta por Pagar</PageTitle>

<div class="container-fluid">
    @if (cuentaPorPagar != null)
    {
        <div class="form-container">
            <EditForm Model="cuentaPorPagar" OnValidSubmit="GuardarCuenta">
                <DataAnnotationsValidator />

                <div class="row g-3">
                    <!-- Orden Compra -->
                    <div class="col-md-6">
                        <label class="form-label">Orden de Compra <span class="required">*</span></label>
                        <select class="form-select" @bind="cuentaPorPagar.OrdenCompraId">
                            <option value="0">Seleccione una orden de compra</option>
                            @foreach (var orden in ordenesCompra)
                            {
                                <option value="@orden.OrdenCompraId">
                                    #@orden.OrdenCompraId - @orden.Proveedor.Nombre
                                </option>
                            }
                        </select>
                    </div>

                    <!-- Monto Total -->
                    <div class="col-md-6">
                        <label class="form-label">Monto Total</label>
                        <input type="number" step="0.01" class="form-control" @bind="cuentaPorPagar.MontoTotal" />
                    </div>

                    <!-- Saldo -->
                    <div class="col-md-6">
                        <label class="form-label">Saldo Pendiente</label>
                        <input type="number" step="0.01" class="form-control" @bind="cuentaPorPagar.SaldoPendiente" />
                    </div>

                    <!-- Fechas -->
                    <div class="col-md-6">
                        <label class="form-label">Fecha Emisión</label>
                        <input type="date" class="form-control" @bind="cuentaPorPagar.FechaEmision" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Fecha Límite Pago</label>
                        <input type="date" class="form-control" @bind="cuentaPorPagar.FechaLimitePago" />
                    </div>

                    <!-- Estado -->
                    <div class="col-md-6">
                        <label class="form-label">Estado</label>
                        <select class="form-select" @bind="cuentaPorPagar.EstadoCuentaId">
                            <option value="0">Seleccione un estado</option>
                            @foreach (var estado in estadosCuentas)
                            {
                                <option value="@estado.EstadoCuentaId">@estado.Nombre</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Porcentaje pagado -->
                @if (cuentaPorPagar.MontoTotal > 0)
                {
                    <div class="mt-4">
                        @{
                            var porcentajePagado = cuentaPorPagar.SaldoPendiente == 0
                            ? 100
                            : Math.Round(((cuentaPorPagar.MontoTotal - cuentaPorPagar.SaldoPendiente) / cuentaPorPagar.MontoTotal) * 100, 2);
                        }
                        <div class="progress" style="height: 25px;">
                            <div class="progress-bar @(porcentajePagado == 100 ? "bg-success" : "bg-info")"
                                 role="progressbar"
                                 style="width: @porcentajePagado%">
                                @porcentajePagado%
                            </div>
                        </div>
                        <p class="mt-2 text-muted">
                            @(porcentajePagado == 100 ? "Cuenta pagada al 100%" : $"Pagado: {porcentajePagado}%")
                        </p>
                    </div>
                }

                <!-- Botones abajo -->
                <div class="mt-4 d-flex justify-content-center gap-3">
                    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private CuentaPorPagar cuentaPorPagar;
    private List<OrdenCompra> ordenesCompra = new();
    private List<EstadoCuenta> estadosCuentas = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        cuentaPorPagar = await context.CuentasPorPagar.FindAsync(Id);
        ordenesCompra = await context.OrdenesCompras.Include(o => o.Proveedor).ToListAsync();
        estadosCuentas = await context.EstadosCuentas.ToListAsync();
    }

    private async Task GuardarCuenta()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            var entidad = await context.CuentasPorPagar.FindAsync(Id);

            if (entidad != null)
            {
                entidad.OrdenCompraId = cuentaPorPagar.OrdenCompraId;
                entidad.MontoTotal = cuentaPorPagar.MontoTotal;
                entidad.SaldoPendiente = cuentaPorPagar.SaldoPendiente;
                entidad.FechaEmision = cuentaPorPagar.FechaEmision;
                entidad.FechaLimitePago = cuentaPorPagar.FechaLimitePago;
                entidad.EstadoCuentaId = cuentaPorPagar.EstadoCuentaId;

                await context.SaveChangesAsync();
                toastService.ShowSuccess("Cuenta actualizada exitosamente.");
                Navigation.NavigateTo("/CuentasPorPagar/Index");
            }
            else
            {
                toastService.ShowError("No se encontró la cuenta.");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Error al guardar la cuenta: " + ex.Message);
        }
    }

    private void Cancelar() => Navigation.NavigateTo("/CuentasPorPagar/Index");
}
