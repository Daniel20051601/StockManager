@page "/Proveedores/Index"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using StockManager.Dal
@using StockManager.Models
@inject IDbContextFactory<Contexto> DbContextFactory
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

<PageTitle>Proveedores</PageTitle>

<style>
    .table-striped-custom tbody tr:nth-child(odd) {
        background-color: #ffffff;
    }

    .table-striped-custom tbody tr:nth-child(even) {
        background-color: #f2f2f2;
    }
</style>

<div class="mt-5">

    <div class="row mb-5">
        <div class="col">
            <h3 class="fw-semibold">Proveedores</h3>
        </div>
        <div class="col-auto d-flex align-items-center gap-3">
            <div class="input-group" style="width: 300px;">
                <input class="form-control shadow-sm text-secondary" placeholder="Buscar..." @bind="searchTerm" @onkeypress="OnKeyPress" />
                <button class="btn btn-outline-secondary" type="button" @onclick="OnSearchClick">
                    <i class="bi bi-search"></i>
                </button>
            </div>
            <a href="#" class="btn btn-outline bi bi-bell text-secondary shadow-sm"></a>
        </div>
    </div>

    <div class="row d-flex justify-content-between mb-5">
        <div class="col-auto">
        </div>
        <div class="col-auto">
            <div class="d-flex align-items-center">
                <a href="/Proveedores/Nuevo" class="btn btn-success shadow-sm d-flex align-items-center">
                    <i class="bi bi-plus-circle me-2"></i> Nuevo
                </a>
                <div class="dropdown ms-3">
                    <button class="btn btn-outline dropdown-toggle shadow-sm" type="button" data-bs-toggle="dropdown">
                        Estado (@GetStatusDisplayText())
                    </button>
                    <ul class="dropdown-menu">
                        <li><button class="dropdown-item @(statusFilter == "activo" ? "active" : "")" @onclick='() => FilterByStatus("activo")'>Activos</button></li>
                        <li><button class="dropdown-item @(statusFilter == "inactivo" ? "active" : "")" @onclick='() => FilterByStatus("inactivo")'>Inactivos</button></li>
                        <li><button class="dropdown-item @(statusFilter == "todos" ? "active" : "")" @onclick='() => FilterByStatus("todos")'>Todos</button></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <h5 class="fw-semibold text-dark">Lista de proveedores</h5>
            <small class="text-muted">Mostrando @filteredProveedores.Count de @totalRegistros proveedores</small>
        </div>
    </div>

    <div class="table-responsive mt-4">
        <table class="table table-hover align-middle shadow-sm table-striped-custom">
            <thead class="table-light">
                <tr>
                    <th style="width: 180px;">Nombre</th>
                    <th style="width: 150px;">Contacto</th>
                    <th style="width: 130px;">Teléfono</th>
                    <th style="width: 200px;">Email</th>
                    <th style="width: 200px;">Dirección</th>
                    <th style="width: 100px;">Estado</th>
                    <th style="width: 100px;">Productos</th>
                    <th style="width: 150px;">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredProveedores.Any())
                {
                    @foreach (var proveedor in filteredProveedores)
                    {
                        <tr>
                            <td>@proveedor.Nombre</td>
                            <td>@proveedor.NombreContacto</td>
                            <td>@proveedor.Telefono</td>
                            <td>@proveedor.Email</td>
                            <td>@proveedor.Direccion</td>
                            <td>
                                <span class="badge @(IsProveedorActivo(proveedor) ? "bg-success" : "bg-secondary")">
                                    @(IsProveedorActivo(proveedor) ? "Activo" : "Inactivo")
                                </span>
                            </td>
                            <td><span class="badge bg-light text-dark">@GetCantidadProductos(proveedor.ProveedorId)</span></td>
                            <td>
                                <div class="dropdown">
                                    <button class="action-btn" type="button" data-bs-toggle="dropdown">⋮</button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li><a class="dropdown-item" href="/Proveedores/Editar/@proveedor.ProveedorId">Editar</a></li>
                                        <li><button class="dropdown-item text-danger" @onclick="() => EliminarProveedor(proveedor.ProveedorId)">Eliminar</button></li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8" class="text-center text-muted py-4">
                            No se encontraron proveedores que coincidan con los filtros aplicados.
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (totalPaginas > 1)
    {
        <div class="d-flex justify-content-end mt-3">
            <nav>
                <ul class="pagination">
                    <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="PaginaAnterior">Anterior</button>
                    </li>
                    @for (int i = 1; i <= totalPaginas; i++)
                    {
                        <li class="page-item @(paginaActual == i ? "active" : "")">
                            <button class="page-link" @onclick="@(() => CambiarPagina(i))">@i</button>
                        </li>
                    }
                    <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                        <button class="page-link" @onclick="PaginaSiguiente">Siguiente</button>
                    </li>
                </ul>
            </nav>
        </div>
    }

</div>

@code {
    private List<Proveedor> proveedores = new();
    private List<Proveedor> filteredProveedores = new();
    private List<EstadoProveedor> estadosProveedor = new();
    private string searchTerm = string.Empty;
    private string statusFilter = "todos";
    private int paginaActual = 1;
    private int totalPaginas;
    private int cantidadPorPagina = 10;
    private int totalRegistros;
    private int estadoActivoId = 1; 

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        await CargarEstadosProveedor();
        await CargarProveedores();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("/Proveedores/Index", StringComparison.OrdinalIgnoreCase))
        {
            InvokeAsync(async () =>
            {
                await CargarProveedores();
                StateHasChanged();
            });
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task CargarEstadosProveedor()
    {
        await using var contexto = await DbContextFactory.CreateDbContextAsync();
        estadosProveedor = await contexto.EstadosProveedores.ToListAsync();

        var estadoActivo = estadosProveedor.FirstOrDefault(e =>
            e.Nombre.Equals("Activo", StringComparison.OrdinalIgnoreCase));

        if (estadoActivo != null)
        {
            estadoActivoId = estadoActivo.EstadoProveedorId;
        }
    }

    private async Task CargarProveedores()
    {
        await using var contexto = await DbContextFactory.CreateDbContextAsync();

        var query = contexto.Proveedores.AsQueryable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(p =>
                p.Nombre.Contains(searchTerm) ||
                p.NombreContacto.Contains(searchTerm) ||
                p.Email.Contains(searchTerm));
        }

        if (statusFilter == "activo")
        {
            query = query.Where(p => p.EstadoProveedorId == estadoActivoId);
        }
        else if (statusFilter == "inactivo")
        {
            query = query.Where(p => p.EstadoProveedorId != estadoActivoId);
        }


        totalRegistros = await query.CountAsync();
        totalPaginas = (int)Math.Ceiling(totalRegistros / (double)cantidadPorPagina);

        if (paginaActual > totalPaginas && totalPaginas > 0)
        {
            paginaActual = totalPaginas;
        }

        proveedores = await query
            .Include(p => p.EstadoProveedor)
            .OrderBy(p => p.ProveedorId)
            .Skip((paginaActual - 1) * cantidadPorPagina)
            .Take(cantidadPorPagina)
            .ToListAsync();

        filteredProveedores = proveedores;
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        paginaActual = 1;
        await CargarProveedores();
    }

    private async Task OnSearchClick()
    {
        paginaActual = 1;
        await CargarProveedores();
        StateHasChanged();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSearchClick();
        }
    }

    private async Task FilterByStatus(string status)
    {
        statusFilter = status;
        paginaActual = 1;
        await CargarProveedores();
        StateHasChanged();
    }

    private async Task PaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            await CargarProveedores();
        }
    }

    private async Task PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
        {
            paginaActual++;
            await CargarProveedores();
        }
    }

    private async Task CambiarPagina(int pagina)
    {
        paginaActual = pagina;
        await CargarProveedores();
    }

    private async Task EliminarProveedor(int id)
    {
        await using var contexto = await DbContextFactory.CreateDbContextAsync();
        var proveedor = await contexto.Proveedores.FindAsync(id);
        if (proveedor != null)
        {
            contexto.Proveedores.Remove(proveedor);
            await contexto.SaveChangesAsync();
            await CargarProveedores();
        }
    }

    private int GetCantidadProductos(int proveedorId)
    {
        using var contexto = DbContextFactory.CreateDbContext();
        return contexto.OrdenesCompras.Count(o => o.ProveedorId == proveedorId);
    }

    private bool IsProveedorActivo(Proveedor proveedor)
    {
        return proveedor.EstadoProveedorId == estadoActivoId;
    }

    private string GetStatusDisplayText()
    {
        return statusFilter switch
        {
            "activo" => "Activos",
            "inactivo" => "Inactivos",
            _ => "Todos"
        };
    }
}