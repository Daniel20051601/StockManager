@page "/Proveedores/Editar/{id:int}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using StockManager.Dal
@using StockManager.Models
@inject IDbContextFactory<Contexto> DbContextFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations

<PageTitle>Editar Proveedor</PageTitle>

<style>
    .form-container {
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        padding: 30px;
    }

    .form-header {
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 20px;
        margin-bottom: 30px;
    }

    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 8px;
    }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 12px 15px;
        font-size: 14px;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .form-select {
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 12px 15px;
        font-size: 14px;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        padding: 12px 30px;
        font-weight: 500;
        border-radius: 6px;
    }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
        padding: 12px 30px;
        font-weight: 500;
        border-radius: 6px;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
        padding: 12px 30px;
        font-weight: 500;
        border-radius: 6px;
    }

    .breadcrumb {
        background-color: transparent;
        padding: 0;
        margin-bottom: 20px;
    }

    .breadcrumb-item a {
        color: #007bff;
        text-decoration: none;
    }

    .breadcrumb-item.active {
        color: #6c757d;
    }

    .required-field::after {
        content: " *";
        color: #dc3545;
    }

    .alert {
        border-radius: 6px;
        margin-bottom: 20px;
    }
</style>

<div class="mt-5">

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/Proveedores/Index">Proveedores</a></li>
            <li class="breadcrumb-item active" aria-current="page">Editar Proveedor</li>
        </ol>
    </nav>

    <div class="row mb-4">
        <div class="col">
            <h3 class="fw-semibold">Editar Proveedor</h3>
            <p class="text-muted">Modifica la información del proveedor seleccionado</p>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert @(esError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
            @mensaje
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (proveedor == null)
    {
        <div class="alert alert-warning" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            No se encontró el proveedor solicitado.
        </div>
        <a href="/Proveedores/Index" class="btn btn-secondary">
            <i class="bi bi-arrow-left me-2"></i>Volver a Proveedores
        </a>
    }
    else
    {
        <div class="form-container">
            <div class="form-header">
                <h5 class="fw-semibold mb-0">Información del Proveedor</h5>
            </div>

            <EditForm Model="proveedor" OnValidSubmit="GuardarCambios">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="nombreProveedor" class="form-label required-field">Nombre del Proveedor</label>
                        <InputText @bind-Value="proveedor.Nombre" class="form-control" id="nombreProveedor" />
                        <ValidationMessage For="() => proveedor.Nombre" class="text-danger" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label for="contacto" class="form-label required-field">Persona de Contacto</label>
                        <InputText @bind-Value="proveedor.NombreContacto" class="form-control" id="contacto" />
                        <ValidationMessage For="() => proveedor.NombreContacto" class="text-danger" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="telefono" class="form-label required-field">Teléfono</label>
                        <InputText @bind-Value="proveedor.Telefono" class="form-control" id="telefono" />
                        <ValidationMessage For="() => proveedor.Telefono" class="text-danger" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label for="email" class="form-label required-field">Email</label>
                        <InputText @bind-Value="proveedor.Email" class="form-control" id="email" type="email" />
                        <ValidationMessage For="() => proveedor.Email" class="text-danger" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-8 mb-3">
                        <label for="direccion" class="form-label required-field">Dirección</label>
                        <InputText @bind-Value="proveedor.Direccion" class="form-control" id="direccion" />
                        <ValidationMessage For="() => proveedor.Direccion" class="text-danger" />
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="estado" class="form-label required-field">Estado</label>
                        <InputSelect @bind-Value="proveedor.EstadoProveedorId" class="form-select" id="estado" @onchange="OnEstadoChanged">
                            @foreach (var estado in estadosProveedor)
                            {
                                <option value="@estado.EstadoProveedorId">@estado.Nombre</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="rnc" class="form-label">RNC/Cédula</label>
                        <InputText @bind-Value="proveedor.RNC" class="form-control" id="rnc" placeholder="Ej: 130-12345-6" />
                    </div>
                </div>

                <div class="d-flex justify-content-end gap-3 mt-4 pt-3 border-top">
                    <a href="/Proveedores/Index" class="btn btn-secondary">
                        <i class="bi bi-arrow-left me-2"></i>Cancelar
                    </a>
                    <button type="submit" class="btn btn-success" disabled="@guardando">
                        @if (guardando)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Guardando...</span>
                        }
                        else
                        {
                            <i class="bi bi-check-circle me-2"></i>
                            <span>Guardar Cambios</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    public class ProveedorDto
    {
        [Required(ErrorMessage = "El nombre del proveedor es requerido")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "La persona de contacto es requerida")]
        public string NombreContacto { get; set; } = string.Empty;

        [Required(ErrorMessage = "El teléfono es requerido")]
        public string Telefono { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La dirección es requerida")]
        public string Direccion { get; set; } = string.Empty;

        public int EstadoProveedorId { get; set; }

        public string RNC { get; set; } = string.Empty;
    }

    private ProveedorDto? proveedor;
    private List<EstadoProveedor> estadosProveedor = new();
    private bool guardando = false;
    private string mensaje = string.Empty;
    private bool esError = false;
    private int estadoAnterior;

    protected override async Task OnInitializedAsync()
    {
        await CargarEstadosProveedor();
        await CargarProveedor();
    }

    private async Task CargarEstadosProveedor()
    {
        await using var contexto = await DbContextFactory.CreateDbContextAsync();
        estadosProveedor = await contexto.EstadosProveedores.ToListAsync();
    }

    private async Task CargarProveedor()
    {
        await using var contexto = await DbContextFactory.CreateDbContextAsync();

        var proveedorExistente = await contexto.Proveedores
            .Include(p => p.EstadoProveedor)
            .FirstOrDefaultAsync(p => p.ProveedorId == Id);

        if (proveedorExistente != null)
        {
            proveedor = new ProveedorDto
                {
                    Nombre = proveedorExistente.Nombre,
                    NombreContacto = proveedorExistente.NombreContacto ?? string.Empty,
                    Telefono = proveedorExistente.Telefono ?? string.Empty,
                    Email = proveedorExistente.Email ?? string.Empty,
                    Direccion = proveedorExistente.Direccion ?? string.Empty,
                    EstadoProveedorId = proveedorExistente.EstadoProveedorId,
                    RNC = proveedorExistente.RNC ?? string.Empty
                };

            estadoAnterior = proveedor.EstadoProveedorId;
        }
    }

    private async Task OnEstadoChanged(ChangeEventArgs e)
    {
        if (proveedor == null) return;

        int nuevoEstado = int.Parse(e.Value?.ToString() ?? "1");

        if (estadoAnterior != nuevoEstado)
        {
            var estadoTexto = estadosProveedor.FirstOrDefault(estado => estado.EstadoProveedorId == nuevoEstado)?.Nombre ?? "desconocido";
            bool confirmacion = await JSRuntime.InvokeAsync<bool>("confirm",
                $"¿Está seguro de cambiar el estado del proveedor a {estadoTexto.ToLower()}?");

            if (!confirmacion)
            {
                proveedor.EstadoProveedorId = estadoAnterior;
                StateHasChanged();
                return;
            }
        }

        proveedor.EstadoProveedorId = nuevoEstado;
    }

    private async Task GuardarCambios()
    {
        if (proveedor == null) return;

        guardando = true;
        mensaje = string.Empty;
        esError = false;

        try
        {
            if (await ValidarProveedorExistente())
            {
                mensaje = "Ya existe otro proveedor con ese nombre o email.";
                esError = true;
                return;
            }

            await using var contexto = await DbContextFactory.CreateDbContextAsync();

            var proveedorExistente = await contexto.Proveedores.FindAsync(Id);
            if (proveedorExistente != null)
            {
                proveedorExistente.Nombre = proveedor.Nombre;
                proveedorExistente.NombreContacto = proveedor.NombreContacto;
                proveedorExistente.Telefono = proveedor.Telefono;
                proveedorExistente.Email = proveedor.Email;
                proveedorExistente.Direccion = proveedor.Direccion;
                proveedorExistente.EstadoProveedorId = proveedor.EstadoProveedorId;
                proveedorExistente.RNC = proveedor.RNC;

                await contexto.SaveChangesAsync();

                estadoAnterior = proveedor.EstadoProveedorId;
                mensaje = "Los cambios se han guardado correctamente.";
                esError = false;

                StateHasChanged();

                await Task.Delay(2000);
                Navigation.NavigateTo("/Proveedores/Index");
            }
            else
            {
                mensaje = "No se encontró el proveedor a actualizar.";
                esError = true;
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al guardar los cambios: {ex.Message}";
            esError = true;
        }
        finally
        {
            guardando = false;
            StateHasChanged();
        }
    }

    private async Task<bool> ValidarProveedorExistente()
    {
        if (proveedor == null) return false;

        await using var contexto = await DbContextFactory.CreateDbContextAsync();

        return await contexto.Proveedores.AnyAsync(p =>
            p.ProveedorId != Id &&
            (p.Nombre.ToLower() == proveedor.Nombre.ToLower() ||
             p.Email.ToLower() == proveedor.Email.ToLower()));
    }
}