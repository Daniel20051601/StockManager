@page "/CuentasPorCobrar/Create"
@rendermode InteractiveServer
@using StockManager.Models
@using StockManager.Dal
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Contexto> DbFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService toastService

<PageTitle>Crear Cuenta por Cobrar</PageTitle>

<style>
    .form-container {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        margin-top: 2rem;
    }

    .btn-crear {
        background-color: #28a745;
        border-color: #28a745;
        color: white;
    }

        .btn-crear:hover {
            background-color: #218838;
            border-color: #1e7e34;
            color: white;
        }

    .btn-cancelar {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }

        .btn-cancelar:hover {
            background-color: #5a6268;
            border-color: #545b62;
            color: white;
        }

    .required {
        color: #dc3545;
    }
</style>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h3>Crear Nueva Cuenta por Cobrar</h3>
        </div>
    </div>

    @if (cargando)
    {
        <p>Cargando datos...</p>
    }
    else
    {
        <div class="form-container">
            <EditForm Model="cuentaPorCobrar" OnValidSubmit="CrearCuenta">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row g-3">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Factura <span class="required">*</span></label>
                        <InputSelect @bind-Value="cuentaPorCobrar.FacturaId" class="form-select" @onchange="OnFacturaSeleccionada">
                            <option value="0">Seleccione una factura</option>
                            @foreach (var factura in facturas)
                            {
                                <option value="@factura.FacturaId">
                                    #@factura.FacturaId - @factura.Cliente?.Nombre (@factura.Total.ToString("C"))
                                </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => cuentaPorCobrar.FacturaId" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Estado de la Cuenta <span class="required">*</span></label>
                        <InputSelect @bind-Value="cuentaPorCobrar.EstadoCuentaId" class="form-select">
                            <option value="0">Seleccione un estado</option>
                            @foreach (var estado in estadosCuentas)
                            {
                                <option value="@estado.EstadoCuentaId">@estado.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => cuentaPorCobrar.EstadoCuentaId" />
                    </div>

                    <div class="col-md-4 mb-3">
                        <label class="form-label">Monto Total</label>
                        <InputNumber @bind-Value="cuentaPorCobrar.MontoTotal" class="form-control" readonly />
                        <ValidationMessage For="() => cuentaPorCobrar.MontoTotal" />
                    </div>

                    <div class="col-md-4 mb-3">
                        <label class="form-label">Saldo Pendiente</label>
                        <InputNumber @bind-Value="cuentaPorCobrar.SaldoPendiente" class="form-control" readonly />
                        <ValidationMessage For="() => cuentaPorCobrar.SaldoPendiente" />
                    </div>

                    <div class="col-md-4 mb-3">
                        <label class="form-label">Mora</label>
                        <InputNumber @bind-Value="cuentaPorCobrar.Mora" class="form-control" readonly />
                        <ValidationMessage For="() => cuentaPorCobrar.Mora" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Fecha de Emisión</label>
                        <InputDate @bind-Value="cuentaPorCobrar.FechaEmision" class="form-control" readonly />
                        <ValidationMessage For="() => cuentaPorCobrar.FechaEmision" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Fecha Límite de Pago <span class="required">*</span></label>
                        <InputDate @bind-Value="cuentaPorCobrar.FechaLimitePago" class="form-control"
                                   min="@cuentaPorCobrar.FechaEmision.ToString("yyyy-MM-dd")" />
                        <ValidationMessage For="() => cuentaPorCobrar.FechaLimitePago" />
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-crear" disabled="@guardando">
                        @(guardando ? "Guardando..." : "Crear Cuenta")
                    </button>
                    <button type="button" class="btn btn-cancelar ms-2" @onclick="Cancelar">Cancelar</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    private CuentaPorCobrar cuentaPorCobrar = new();
    private List<Factura> facturas = new();
    private List<EstadoCuenta> estadosCuentas = new();
    private bool cargando = true;
    private bool guardando = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
        InicializarCuenta();
    }

    private async Task CargarDatosIniciales()
    {
        using var context = DbFactory.CreateDbContext();
        // Incluye el Cliente para poder mostrar su nombre en el dropdown de facturas
        facturas = await context.Facturas.Include(f => f.Cliente).ToListAsync();
        estadosCuentas = await context.EstadosCuentas.ToListAsync();
        cargando = false;
    }

    private void InicializarCuenta()
    {
        cuentaPorCobrar = new CuentaPorCobrar
            {
                Mora = 0,
                FechaEmision = DateTime.UtcNow.Date,
                FechaLimitePago = DateTime.UtcNow.Date.AddDays(30), // Fecha límite por defecto
            // Intenta encontrar el estado "Pendiente", si no existe, usa 0 (o tu ID de estado por defecto)
                EstadoCuentaId = estadosCuentas.FirstOrDefault(e => e.Nombre.ToLower() == "pendiente")?.EstadoCuentaId ?? 0
            };
    }

    private void OnFacturaSeleccionada(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int facturaId))
        {
            cuentaPorCobrar.FacturaId = facturaId;
            var facturaSeleccionada = facturas.FirstOrDefault(f => f.FacturaId == facturaId);

            if (facturaSeleccionada != null)
            {
                // Rellena los campos automáticamente desde la factura seleccionada
                cuentaPorCobrar.MontoTotal = facturaSeleccionada.Total;
                cuentaPorCobrar.SaldoPendiente = facturaSeleccionada.Total; // Al inicio, el saldo pendiente es el monto total
                cuentaPorCobrar.FechaEmision = facturaSeleccionada.FechaEmision.Date;
                cuentaPorCobrar.ClienteId = facturaSeleccionada.ClienteId; // Asigna el ClienteId desde la factura
            }
            else
            {
                // Si se deselecciona o selecciona "Seleccione una factura", reinicia los campos
                cuentaPorCobrar.MontoTotal = 0;
                cuentaPorCobrar.SaldoPendiente = 0;
                cuentaPorCobrar.Mora = 0;
                cuentaPorCobrar.ClienteId = 0;
            }
        }
        else
        {
            // Si el valor no es un número válido, reinicia FacturaId a 0 y limpia campos
            cuentaPorCobrar.FacturaId = 0;
            cuentaPorCobrar.MontoTotal = 0;
            cuentaPorCobrar.SaldoPendiente = 0;
            cuentaPorCobrar.Mora = 0;
            cuentaPorCobrar.ClienteId = 0;
        }
        // Fuerza la actualización de la interfaz de usuario para que los campos readonly se muestren con los nuevos valores
        StateHasChanged();
    }

    private async Task CrearCuenta()
    {
        guardando = true; // Deshabilita el botón para evitar múltiples clics

        try
        {
            // Validaciones adicionales antes de guardar
            if (cuentaPorCobrar.FacturaId == 0)
            {
                toastService.ShowError("Debe seleccionar una factura.");
                return;
            }
            if (cuentaPorCobrar.EstadoCuentaId == 0)
            {
                toastService.ShowError("Debe seleccionar un Estado de cuenta.");
                return;
            }
            if (cuentaPorCobrar.MontoTotal <= 0)
            {
                toastService.ShowError("El Monto Total debe ser mayor que cero.");
                return;
            }
            if (cuentaPorCobrar.SaldoPendiente < 0)
            {
                toastService.ShowError("El Saldo Pendiente no puede ser negativo.");
                return;
            }
            if (cuentaPorCobrar.FechaLimitePago < cuentaPorCobrar.FechaEmision)
            {
                toastService.ShowError("La Fecha Límite de Pago no puede ser anterior a la Fecha de Emisión.");
                return;
            }

            // Convertir fechas a UTC antes de guardar en la base de datos para consistencia
            cuentaPorCobrar.FechaEmision = DateTime.SpecifyKind(cuentaPorCobrar.FechaEmision, DateTimeKind.Utc);
            cuentaPorCobrar.FechaLimitePago = DateTime.SpecifyKind(cuentaPorCobrar.FechaLimitePago, DateTimeKind.Utc);

            using var context = DbFactory.CreateDbContext();

            // Verificamos si ya existe una cuenta por cobrar para la factura seleccionada
            var existe = await context.CuentasPorCobrar.AnyAsync(c => c.FacturaId == cuentaPorCobrar.FacturaId);

            if (existe)
            {
                toastService.ShowWarning("Ya existe una cuenta por cobrar para esta factura.");
                return; // No continuamos si ya existe
            }

            // Asegurarse de que el ClienteId se asigne correctamente desde la factura ANTES de añadir al contexto.
            // Esto es crucial para la relación de la base de datos.
            var factura = await context.Facturas.FindAsync(cuentaPorCobrar.FacturaId);
            if (factura != null)
            {
                cuentaPorCobrar.ClienteId = factura.ClienteId;
            }
            else
            {
                toastService.ShowError("No se encontró la factura seleccionada. Por favor, intente de nuevo.");
                return;
            }

            // Añadir la nueva cuenta por cobrar al contexto y guardar
            context.CuentasPorCobrar.Add(cuentaPorCobrar);
            await context.SaveChangesAsync();

            toastService.ShowSuccess("Cuenta por cobrar creada correctamente.");
            await Task.Delay(1500); // Pequeña pausa para que el usuario vea el mensaje
            Navigation.NavigateTo("/CuentasPorCobrar/Index"); // Redirige a la página de índice
        }
        catch (Exception ex)
        {
            // Muestra un mensaje de error más útil
            toastService.ShowError($"Error al guardar la cuenta por cobrar: {ex.InnerException?.Message ?? ex.Message}");
        }
        finally
        {
            guardando = false; // Habilita el botón de nuevo
        }
    }

    private async Task Cancelar()
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea cancelar la creación? Los cambios no guardados se perderán.");
        if (confirmar)
        {
            Navigation.NavigateTo("/CuentasPorCobrar/Index");
        }
    }
}