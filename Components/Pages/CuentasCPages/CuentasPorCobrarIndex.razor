@page "/CuentasPorCobrar/Index"
@rendermode InteractiveServer
@using StockManager.Dal
@using StockManager.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Contexto> DbFactory
@inject NavigationManager Navigation
@inject Blazored.Toast.Services.IToastService toastService

<PageTitle>Cuentas por Cobrar</PageTitle>

<style>
    .table-striped-custom tbody tr:nth-child(odd) {
        background-color: #ffffff;
    }

    .table-striped-custom tbody tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .btn-crear {
        background-color: #198754;
        border-color: #198754;
        color: white;
        display: flex;
        align-items: center;
    }

        .btn-crear:hover {
            background-color: #157347;
            border-color: #146c43;
            color: white;
        }

    .action-btn {
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0;
        margin: 0;
        color: #6c757d;
    }

        .action-btn:hover {
            color: #000;
        }
</style>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p>Cargando cuentas por cobrar...</p>
    </div>
}
else
{
    <div class="mt-5">
        <div class="row mb-4">
            <div class="col">
                <h3 class="fw-semibold">Cuentas por Cobrar</h3>
            </div>
            <div class="col-auto d-flex align-items-center gap-3">
                <input @bind="terminoBusqueda" @bind:event="oninput" @onkeyup="BuscarCuentas"
                       class="form-control shadow-sm text-secondary" style="width: 250px;" placeholder="Buscar por cliente, factura, o estado..." />
                <button type="button" class="btn btn-crear shadow-sm" @onclick="CrearNuevaCuenta">
                    <i class="bi bi-plus-circle me-2"></i>Crear
                </button>
            </div>
        </div>

        <div class="row d-flex justify-content-between mb-4">
            <div class="col-auto">
                <button type="button" class="btn btn-outline">Resumen</button>
            </div>
        </div>

        <div class="table-responsive mt-4">
            <table class="table table-hover align-middle shadow-sm table-striped-custom">
                <thead class="table-light">
                    <tr>
                        <th>Factura #</th>
                        <th>Cliente</th>
                        <th>Monto Total</th>
                        <th>Saldo Pendiente</th>
                        <th>Fecha de Emisión</th>
                        <th>Fecha Límite de Pago</th>
                        <th>Mora</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (cuentasPaginadas.Any())
                    {
                        @foreach (var cuenta in cuentasPaginadas)
                        {
                            <tr>
                                <td>#@cuenta.Factura?.NumeroFactura</td>
                                <td>@cuenta.Cliente?.Nombre</td>
                                <td>@cuenta.MontoTotal.ToString("C", new System.Globalization.CultureInfo("es-DO"))</td>
                                <td>@cuenta.SaldoPendiente.ToString("C", new System.Globalization.CultureInfo("es-DO"))</td>
                                <td>@cuenta.FechaEmision.ToString("dd/MM/yyyy")</td>
                                <td>@cuenta.FechaLimitePago.ToString("dd/MM/yyyy")</td>
                                <td>@cuenta.Mora.ToString("C", new System.Globalization.CultureInfo("es-DO"))</td>
                                <td>@cuenta.EstadoCuenta?.Nombre</td>
                                <td>
                                    <div class="dropdown">
                                        <button class="action-btn" data-bs-toggle="dropdown">⋮</button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><button class="dropdown-item text-primary" @onclick="() => EditarCuenta(cuenta.CuentaPorCobrarId)">Editar</button></li>
                                            <li><button class="dropdown-item text-danger" @onclick="() => EliminarCuenta(cuenta.CuentaPorCobrarId)">Eliminar</button></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="text-center py-4">No se encontraron cuentas por cobrar.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (cuentasFiltradas.Any())
        {
            <div class="d-flex justify-content-end mt-3">
                <nav>
                    <ul class="pagination">
                        <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="PaginaAnterior">Anterior</button>
                        </li>
                        @for (int i = 1; i <= totalPaginas; i++)
                        {
                            <li class="page-item @(i == paginaActual ? "active" : "")">
                                <button class="page-link" @onclick="() => CambiarPagina(i)">@i</button>
                            </li>
                        }
                        <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                            <button class="page-link" @onclick="PaginaSiguiente">Siguiente</button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    </div>
}

@code {
    private List<CuentaPorCobrar> cuentas = new();
    private List<CuentaPorCobrar> cuentasFiltradas = new();
    private string terminoBusqueda = string.Empty;
    private bool isLoading = true;

    private int paginaActual = 1;
    private int elementosPorPagina = 10;
    private int totalPaginas => (int)Math.Ceiling((double)cuentasFiltradas.Count / elementosPorPagina);
    private List<CuentaPorCobrar> cuentasPaginadas => cuentasFiltradas
        .Skip((paginaActual - 1) * elementosPorPagina)
        .Take(elementosPorPagina)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += HandleLocationChanged;
        isLoading = true;
        await CargarDatos();
        isLoading = false;
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("/CuentasPorCobrar/Index", StringComparison.OrdinalIgnoreCase))
        {
            InvokeAsync(async () =>
            {
                isLoading = true;
                await CargarDatos();
                isLoading = false;
                StateHasChanged();
            });
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }

    private async Task CargarDatos()
    {
        using var context = DbFactory.CreateDbContext();
        cuentas = await context.CuentasPorCobrar
            .Include(c => c.Cliente)
            .Include(c => c.EstadoCuenta)
            .Include(c => c.Factura)
            .ToListAsync();

        cuentasFiltradas = cuentas;
        BuscarCuentas();
    }

    private void BuscarCuentas()
    {
        if (string.IsNullOrWhiteSpace(terminoBusqueda))
        {
            cuentasFiltradas = cuentas;
        }
        else
        {
            var termino = terminoBusqueda.ToLower();
            cuentasFiltradas = cuentas.Where(c =>
                (c.Cliente != null && c.Cliente.Nombre.ToLower().Contains(termino)) ||
                (c.Factura != null && c.Factura.NumeroFactura.ToLower().Contains(termino)) ||
                (c.EstadoCuenta != null && c.EstadoCuenta.Nombre.ToLower().Contains(termino)) ||
                c.MontoTotal.ToString().Contains(termino) ||
                c.SaldoPendiente.ToString().Contains(termino)
            ).ToList();
        }

        if (!cuentasFiltradas.Any() && !string.IsNullOrWhiteSpace(terminoBusqueda))
        {
            toastService.ShowInfo("No se encontraron resultados para la búsqueda.");
        }

        paginaActual = 1;
        StateHasChanged();
    }

    private void CrearNuevaCuenta()
    {
        Navigation.NavigateTo("/CuentasPorCobrar/Create");
    }

    private void EditarCuenta(int id)
    {
        Navigation.NavigateTo($"/CuentasPorCobrar/Edit/{id}");
    }

    private async Task EliminarCuenta(int id)
    {
        using var context = DbFactory.CreateDbContext();
        var cuenta = await context.CuentasPorCobrar.FindAsync(id);
        if (cuenta != null)
        {
            context.CuentasPorCobrar.Remove(cuenta);
            await context.SaveChangesAsync();
            toastService.ShowSuccess("Cuenta eliminada correctamente.");
            await CargarDatos();
            StateHasChanged();
        }
        else
        {
            toastService.ShowError("No se pudo encontrar la cuenta.");
        }
    }

    private void PaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
        }
    }

    private void PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
        {
            paginaActual++;
        }
    }

    private void CambiarPagina(int pagina)
    {
        paginaActual = pagina;
    }
}